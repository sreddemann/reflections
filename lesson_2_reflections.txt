When I initialize a new repo, the metadata file structure is added and a new git repository is created. There is no initial commit, all commits have to be done by the user.

We need to initialize a git repo to be able to track future changes via commits. The command basically enables version control for the current directory.

The staging area is stuck in between the working directory and the actual repository. It helps controlling the commits to the repo very specifically. It will help to keep track of changes to files that are edited during one feature addition for example. Otherwise you would always commit all the files or have to specify the subset via command line which might become a tedious task.

The staging area helps to see exactly which files will be committed to the repository. Even if you changed some file, which was not part of a major logical change, you can exclude it from the staging area and therefore make clear commits.

Branches are logically disjunct versions of the master branch. You can use them to implement a experimental version of your code without touching the master that can be checked out at any point to demo your current working version.

The commit diagram helps to understand the dependency structure within the repo. This is, you can decide which commits are unreachable and if you need to create a new branch. 

Merging two branches tries to put together all changes that were done in both branches. In the graph the forking that happened earlier will run together in a new node with the branch label of the branch that was checked out before merging.

Merging is mostly a very technical process. This is completely done by git thus reducing the work you would have with a full manual merger. Whenever there are conflicts, git will ask you to solve them to not create erradical merged code-bases.